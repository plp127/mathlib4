/-
Copyright (c) 2025 Aaron Liu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Aaron Liu
-/
import Mathlib.Tactic.CCC.Lambda.Basic

universe u v w

namespace Mathlib.Tactic.CCC

inductive Morphism {Œπ : Type u} {Œ∫ : Type v} (s t : Œ∫ ‚Üí Object Œπ) :
    (source target : Object Œπ) ‚Üí Type (max u v) where
  | of (k : Œ∫) : Morphism s t (s k) (t k)
  | id (obj : Object Œπ) : Morphism s t obj obj
  | comp {obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ : Object Œπ}
    (f : Morphism s t obj‚ÇÅ obj‚ÇÇ) (g : Morphism s t obj‚ÇÇ obj‚ÇÉ) : Morphism s t obj‚ÇÅ obj‚ÇÉ
  | unit (src : Object Œπ) : Morphism s t src .unit
  | prod {src tl tr : Object Œπ} (left : Morphism s t src tl) (right : Morphism s t src tr) :
    Morphism s t src (.prod tl tr)
  | left (tl tr : Object Œπ) : Morphism s t (.prod tl tr) tl
  | right (tl tr : Object Œπ) : Morphism s t (.prod tl tr) tr
  | curry {tl tr ta : Object Œπ} (u : Morphism s t (.prod tl tr) ta) : Morphism s t tr (.hom tl ta)
  | eval (td ta : Object Œπ) : Morphism s t (.prod td (.hom td ta)) ta

def Morphism.read {Œπ : Type u} {Œ∫ : Type v} {s t : Œ∫ ‚Üí Object Œπ}
    (ri : Œπ ‚Üí Type w) (rk : (k : Œ∫) ‚Üí (s k).read ri ‚Üí (t k).read ri)
    {src tgt : Object Œπ} (t : Morphism s t src tgt) : src.read ri ‚Üí tgt.read ri :=
  match t with
  | .of k => rk k
  | .id _ => fun x => x
  | .comp f g => fun x => g.read ri rk (f.read ri rk x)
  | .unit _ => fun _ => PUnit.unit
  | .prod f g => fun x => (f.read ri rk x, g.read ri rk x)
  | .left _ _ => Prod.fst
  | .right _ _ => Prod.snd
  | .curry f => fun x y => f.read ri rk (y, x)
  | .eval _ _ => fun x => x.2 x.1

-- section CategoryTheory
-- open CategoryTheory MonoidalCategory

-- variable {C : Type w} [Category.{r} C] [CartesianMonoidalCategory C] [MonoidalClosed C]

-- def Object.interpret {Œπ : Type u} (ri : Œπ ‚Üí C) (t : Object Œπ) : C :=
--   match t with
--   | .of i => ri i
--   | .unit => ùüô_ C
--   | .prod l r => l.interpret ri ‚äó r.interpret ri
--   | .hom s t => s.interpret ri ‚üπ t.interpret ri

-- def Morphism.interpret {Œπ : Type u} {Œ∫ : Type v} {s t : Œ∫ ‚Üí Object Œπ}
--     (ri : Œπ ‚Üí C) (rk : (k : Œ∫) ‚Üí (s k).interpret ri ‚ü∂ (t k).interpret ri)
--     {src tgt : Object Œπ} (t : Morphism s t src tgt) : src.interpret ri ‚ü∂ tgt.interpret ri :=
--   match t with
--   | .of k => rk k
--   | .id _ => ùüô _
--   | .comp f g => f.interpret ri rk ‚â´ g.interpret ri rk
--   | .unit _ => CartesianMonoidalCategory.toUnit _
--   | .prod f g => CartesianMonoidalCategory.lift (f.interpret ri rk) (g.interpret ri rk)
--   | .left _ _ => CartesianMonoidalCategory.fst _ _
--   | .right _ _ => CartesianMonoidalCategory.snd _ _
--   | .curry f => CartesianClosed.curry (f.interpret ri rk)
--   | .eval _ _ => (CategoryTheory.exp.ev _).app _

-- end CategoryTheory

-- inductive Morphism.Equiv {Œπ : Type u} {Œ∫ : Type v} {s t : Œ∫ ‚Üí Object Œπ} :
--     {source target : Object Œπ} ‚Üí (left right : Morphism s t source target) ‚Üí Prop where
--   | refl {source target : Object Œπ} (u : Morphism s t source target) : Morphism.Equiv u u
--   | symm {source target : Object Œπ} {u v : Morphism s t source target}
--     (h : Morphism.Equiv u v) : Morphism.Equiv v u
--   | trans {source target : Object Œπ} {u v w : Morphism s t source target}
--     (h‚ÇÅ : Morphism.Equiv u v) (h‚ÇÇ : Morphism.Equiv v w) : Morphism.Equiv u w
--   | congr_comp {obj‚ÇÅ obj‚ÇÇ obj‚ÇÉ : Object Œπ}
--     {f‚ÇÅ f‚ÇÇ : Morphism s t obj‚ÇÅ obj‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Morphism s t obj‚ÇÇ obj‚ÇÉ}
--     (hf : Morphism.Equiv f‚ÇÅ f‚ÇÇ) (hg : Morphism.Equiv g‚ÇÅ g‚ÇÇ) :
--     Morphism.Equiv (.comp f‚ÇÅ g‚ÇÇ) (.comp f‚ÇÇ g‚ÇÇ)
--   | congr_prod {src left right : Object Œπ}
--     {f‚ÇÅ f‚ÇÇ : Morphism s t src left} {g‚ÇÅ g‚ÇÇ : Morphism s t src right}
--     (hf : Morphism.Equiv f‚ÇÅ f‚ÇÇ) (hg : Morphism.Equiv g‚ÇÅ g‚ÇÇ) :
--     Morphism.Equiv (.prod f‚ÇÅ g‚ÇÇ) (.prod f‚ÇÇ g‚ÇÇ)
--   | congr_curry {tl tr ta : Object Œπ} {u‚ÇÅ u‚ÇÇ : Morphism s t (.prod tl tr) ta}
--     (h : Morphism.Equiv u‚ÇÅ u‚ÇÇ) : Morphism.Equiv (.curry u‚ÇÅ) (.curry u‚ÇÇ)

end Mathlib.Tactic.CCC
